import pandas as pad
import numpy as nup
import glob
import soundfile
import os
import sys
import librosa
import librosa.display
import seaborn as sbn
import matplotlib.pyplot as mplt
from sklearn import metrics
from sklearn.preprocessing import StandardScaler,OneHotEncoder
from sklearn.metrics import confusion_matrix,classification_report
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
from IPython.display import Audio
import warnings
if not sys.warnoptions:
       warnings.simplefilter("ignore")
warnings.filterwarnings("ignore",category=DeprecationWarning)
RavdessData = "archive.zip"
RavdessDirectoryList=os.listdir(RavdessData)
fileEmotion=[]
filePath=[]
for dir in RavdessDirectoryList:
    actor = os.listdir(RavdessData + dir)
    for file in actor:
        part=file.split('.')[0]
        part=part.split('-')
        fileEmotion.append(int(part[2]))
        filePath.append(RavdessData + dir +'/' + file)
emotion_df=pad.DataFrame(fileEmotion,columns=['Emotions'])
path_df=pad.DataFrame(filePath,columns=['path'])
Ravdess_df=pad.concat([emotion_df,path_df],axis=1)
Ravdess_df.Emotions.replace({1:'neutral',2:'calm',3:'happy',4:'sad',5:'angry',6:'fear',7:'disgust',8:'surprised'},inplace=True)
Ravdess_df.head()
datapath=pad.concat([Ravdess_df],axis=0)
datapath.to_csv("data_path.csv",index=False)
datapath.head()
mplt.title('count of Emotions',size=16)
sbn.countplot(dataPath.Emotions)
mplt.ylabel('count',size=12)
mplt.xlabel('Emotion',size=12)
sbn.despine(top=True,right=True,left=False,bottom=False)
mplt.show()
def createWaveplot(data,sr,e):
    mplt.figure(figsize=(10,3))
    mplt.title('Waveplot for audio with {} emotion'.format(e),size=15)
    librosa.display.waveplot(data,sr=sr)
    mplt.show()
    def createSpectrogram(data,sr,e):
    X=librosa.stft(data)
    Xdb=librosa.amplitude_to_db(abs(X))
    mplt.figure(figsize=(12,3))
    mplt.title('Spectrogram for audio with{} emotion'.format(e),size=15)
    librosa.display.specshow(Xbd,sr=sr,x_axis='time',y_axis='hz')
    mplt.colorbar()
    emotion='fear'
path=nup.array(datapath.path[datapath.Emotion==emotion])[1]
data,sampligRate=librosa.load(path)
createWaveplot(data,samplingrate,emotion)
createSpectrogram(data,sampligRate,emotion)
Audio(path)
emotion='angry'
path=nup.array(datapath.path[datapath.Emotion==emotion])[1]
data,sampligRate=librosa.load(path)
createWaveplot(data,samplingrate,emotion)
createSpectrogram(data,sampligRate,emotion)
Audio(path)
emotion='happy'
path=nup.array(datapath.path[datapath.Emotion==emotion])[1]
data,sampligRate=librosa.load(path)
createWaveplot(data,samplingrate,emotion)
createSpectrogram(data,sampligRate,emotion)
Audio(path)
def noise(data):
    noiseAmp=0.035*nup.random.uniform()*nup.amax(data)
    data=data+noiseAmp*nup.random.normal(size=data.shape[0])
    return data
def stretch(data,rate=0.8):
    return librosa.effects.time_stretch(data,rate)
def shift(data):
    shiftRange=int(nup.random.uniform(low=-5,high=5)*1000)
    return nup.roll(data,shiftRange)
def pitch(data,samplingRate,pitchFactor=0.7):
    return librosa.effects.pitch_shift(data,sampligRate,pitchRate)
    x=noise(data)
mplt.figure(figsize=(14,4))
librosa.display.waveplot(y=x,sr=samplerate)
Audio(X,rate=sampleRate)
x=stretch(data)
mplt.figure(figsize=(14,4))
librosa.display.waveplot(y=x,sr=samplerate)
Audio(X,rate=sampleRate)
x=shift(data)
mplt.figure(figsize=(14,4))
librosa.display.waveplot(y=x,sr=samplerate)
Audio(X,rate=sampleRate)
x=pitch(data,sampleRate)
mplt.figure(figsize=(14,4))
librosa.display.waveplot(y=x,sr=samplerate)
Audio(X,rate=sampleRate)
def extractFeature(fileName,mfcc,chroma,mel):
   with soundfile.soundfile(filename) as soundfile:
    X=soundfile.read(dtype="float32")
    sampleRate=soundFile.samplerate
    if chroma:
        stft=nup.abs(librosa.stft(X))
    result=nup.array([])
    if mfcc:
        mfcc=nup.mean(librosa.feature.mfcc(y=X,sr=sampleRate,n_mfcc=40).T,axis=0)
        result=nup.hstack((result,mfccs))
    if chroma:
        chroma=nup(librosa.feature.chroma_stft(S=stft,sr=sampleRate).T,axis=0)
        result=nup.hstack((result,chroma))
    if mel:
        mel=nup.mean(librosa.feature.melspectrogram(X,sr=samplerate).T,axis=0)
        result=nup.hstack((result,mel))
    return result

emotions={
    '1':'netural',
    '2':'calm',
    '3':'happy',
    '4':'sad',
    '5':'angry',
    '6':'fearful',
    '7':'disgust',
    '8':'surprised'
}
observedemotions=['calm','happy','fearfull','disgust']
def loaddata(test_size=0.2):
    x,y=[],[]
    for file in glob.glob():
        filename=os.path.basename(file)
        emotion1=emotion[filename.split("_")[2]]
    if emotion1 not in observedemotions:
        continue
        feature=extractFeature(file,mfcc=True,chroma=True,mel=True)
        x.append(feature)
        y.emotion1
    return train_test_split(nup.array(x),y,test_size=test_size,random_state=9)
xtrain,xTest,yTrain,yTest=loadData(test_size=0.23)
print((xTrain.shape[0],xTest.shape[0]))
print(f'Feature extracted:{xtrain.shape[1]}')
model=MLPClassifier(alpha=0.01,batch_size=256,epsilon=1e-08,hidden_layer_sizes=(300),learning_rate='adaptive',max_iter=500)
model.fit(xTrain,yTrain)
expected_of_y=yTest
yPred=model.predict(xTest)
print(metrics.confusion_matrix(expected_of_y,yPred))
print(classification_report(yTest,yPred))
accuracy_score(y_true=yTest,y_pred=y_Pred)
print("Accuracy:{:.2f}%".format(accuracy*100))
